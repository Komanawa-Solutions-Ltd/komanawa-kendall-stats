komanawa.kendall_stats.mann_kendall
===================================

.. py:module:: komanawa.kendall_stats.mann_kendall

.. autoapi-nested-parse::

   created matt_dumont
   on: 14/09/23



Classes
-------

.. autoapisummary::

   komanawa.kendall_stats.mann_kendall.MannKendall
   komanawa.kendall_stats.mann_kendall.SeasonalKendall


Module Contents
---------------

.. py:class:: MannKendall(data, alpha=0.05, data_col=None, rm_na=True)

   Bases: :py:obj:`object`


   an object to hold and calculate kendall trends assumes a pandas dataframe or series with a time index

   :param trend: the trend of the data, -1 decreasing, 0 no trend, 1 increasing
   :param h: boolean, True if the trend is significant
   :param p: the p value of the trend
   :param z: the z value of the trend
   :param s: the s value of the trend
   :param var_s: the variance of the s value
   :param alpha: the alpha value used to calculate the trend
   :param data: the data used to calculate the trend
   :param data_col: the column of the data used to calculate the trend


   .. py:method:: calc_senslope()

      calculate the senslope of the data

      :return: senslope, senintercept, lo_slope, up_slope



   .. py:method:: map_trend()
      :classmethod:


      map the trend value to a string (1: increasing, -1: decreasing, 0: no trend)

      :param val: trend value
      :return:



   .. py:method:: plot_data(ax=None, **kwargs)

      plot the data and the senslope fit

      :param ax: optional matplotlib axis to plot the data on
      :param kwargs: kwargs to pass to plt.scatter for the raw data
      :return:



.. py:class:: SeasonalKendall(df, data_col, season_col, alpha=0.05, rm_na=True, freq_limit=0.05)

   Bases: :py:obj:`MannKendall`

   .. autoapi-inheritance-diagram:: komanawa.kendall_stats.mann_kendall.SeasonalKendall
      :parts: 1


   an object to hold and calculate seasonal kendall trends

   :param trend: the trend of the data, -1 decreasing, 0 no trend, 1 increasing
   :param h: boolean, True if the trend is significant
   :param p: the p value of the trend
   :param z: the z value of the trend
   :param s: the s value of the trend
   :param var_s: the variance of the s value
   :param alpha: the alpha value used to calculate the trend
   :param data: the data used to calculate the trend
   :param data_col: the column of the data used to calculate the trend
   :param season_col: the column of the season data used to calculate the trend
   :param freq_limit: the maximum difference in frequency between seasons (as a fraction), if greater than this will raise a warning


   .. py:method:: calc_senslope()

      calculate the senslope of the data
      :return: senslope, senintercept, lo_slope, lo_intercept



   .. py:method:: map_trend()
      :classmethod:


      map the trend value to a string (1: increasing, -1: decreasing, 0: no trend)

      :param val: trend value
      :return:



   .. py:method:: plot_data(ax=None, **kwargs)

      plot the data and the senslope fit

      :param ax: optional matplotlib axis to plot the data on
      :param kwargs: kwargs to pass to plt.scatter for the raw data (note that the seasonal column is passed to scatter as c)
      :return:



